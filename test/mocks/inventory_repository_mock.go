// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/core/ports/inventory_repository.go
//
// Generated by this command:
//
//	mockgen -source=../../internal/core/ports/inventory_repository.go -destination=inventory_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ammerola/resell-be/internal/core/domain"
	ports "github.com/ammerola/resell-be/internal/core/ports"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockInventoryRepository is a mock of InventoryRepository interface.
type MockInventoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryRepositoryMockRecorder
	isgomock struct{}
}

// MockInventoryRepositoryMockRecorder is the mock recorder for MockInventoryRepository.
type MockInventoryRepositoryMockRecorder struct {
	mock *MockInventoryRepository
}

// NewMockInventoryRepository creates a new mock instance.
func NewMockInventoryRepository(ctrl *gomock.Controller) *MockInventoryRepository {
	mock := &MockInventoryRepository{ctrl: ctrl}
	mock.recorder = &MockInventoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryRepository) EXPECT() *MockInventoryRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockInventoryRepository) Count(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockInventoryRepositoryMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockInventoryRepository)(nil).Count), ctx)
}

// Delete mocks base method.
func (m *MockInventoryRepository) Delete(ctx context.Context, lotID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, lotID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInventoryRepositoryMockRecorder) Delete(ctx, lotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInventoryRepository)(nil).Delete), ctx, lotID)
}

// Exists mocks base method.
func (m *MockInventoryRepository) Exists(ctx context.Context, lotID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, lotID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockInventoryRepositoryMockRecorder) Exists(ctx, lotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockInventoryRepository)(nil).Exists), ctx, lotID)
}

// FindAll mocks base method.
func (m *MockInventoryRepository) FindAll(ctx context.Context, params ports.ListParams) ([]*domain.InventoryItem, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, params)
	ret0, _ := ret[0].([]*domain.InventoryItem)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockInventoryRepositoryMockRecorder) FindAll(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockInventoryRepository)(nil).FindAll), ctx, params)
}

// FindByID mocks base method.
func (m *MockInventoryRepository) FindByID(ctx context.Context, lotID uuid.UUID) (*domain.InventoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, lotID)
	ret0, _ := ret[0].(*domain.InventoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockInventoryRepositoryMockRecorder) FindByID(ctx, lotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockInventoryRepository)(nil).FindByID), ctx, lotID)
}

// FindByInvoiceID mocks base method.
func (m *MockInventoryRepository) FindByInvoiceID(ctx context.Context, invoiceID string) ([]domain.InventoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByInvoiceID", ctx, invoiceID)
	ret0, _ := ret[0].([]domain.InventoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByInvoiceID indicates an expected call of FindByInvoiceID.
func (mr *MockInventoryRepositoryMockRecorder) FindByInvoiceID(ctx, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByInvoiceID", reflect.TypeOf((*MockInventoryRepository)(nil).FindByInvoiceID), ctx, invoiceID)
}

// Save mocks base method.
func (m *MockInventoryRepository) Save(ctx context.Context, item *domain.InventoryItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockInventoryRepositoryMockRecorder) Save(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockInventoryRepository)(nil).Save), ctx, item)
}

// SaveBatch mocks base method.
func (m *MockInventoryRepository) SaveBatch(ctx context.Context, items []domain.InventoryItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatch", ctx, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBatch indicates an expected call of SaveBatch.
func (mr *MockInventoryRepositoryMockRecorder) SaveBatch(ctx, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatch", reflect.TypeOf((*MockInventoryRepository)(nil).SaveBatch), ctx, items)
}

// SoftDelete mocks base method.
func (m *MockInventoryRepository) SoftDelete(ctx context.Context, lotID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", ctx, lotID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockInventoryRepositoryMockRecorder) SoftDelete(ctx, lotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockInventoryRepository)(nil).SoftDelete), ctx, lotID)
}

// Update mocks base method.
func (m *MockInventoryRepository) Update(ctx context.Context, item *domain.InventoryItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockInventoryRepositoryMockRecorder) Update(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInventoryRepository)(nil).Update), ctx, item)
}
