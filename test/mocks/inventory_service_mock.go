// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/core/ports/inventory_service.go
//
// Generated by this command:
//
//	mockgen -source=../../internal/core/ports/inventory_service.go -destination=inventory_service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/ammerola/resell-be/internal/core/domain"
	ports "github.com/ammerola/resell-be/internal/core/ports"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockInventoryService is a mock of InventoryService interface.
type MockInventoryService struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceMockRecorder
	isgomock struct{}
}

// MockInventoryServiceMockRecorder is the mock recorder for MockInventoryService.
type MockInventoryServiceMockRecorder struct {
	mock *MockInventoryService
}

// NewMockInventoryService creates a new mock instance.
func NewMockInventoryService(ctrl *gomock.Controller) *MockInventoryService {
	mock := &MockInventoryService{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryService) EXPECT() *MockInventoryServiceMockRecorder {
	return m.recorder
}

// BulkUpsert mocks base method.
func (m *MockInventoryService) BulkUpsert(ctx context.Context, items []domain.InventoryItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsert", ctx, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsert indicates an expected call of BulkUpsert.
func (mr *MockInventoryServiceMockRecorder) BulkUpsert(ctx, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsert", reflect.TypeOf((*MockInventoryService)(nil).BulkUpsert), ctx, items)
}

// DeleteItem mocks base method.
func (m *MockInventoryService) DeleteItem(ctx context.Context, lotID uuid.UUID, permanent bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", ctx, lotID, permanent)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockInventoryServiceMockRecorder) DeleteItem(ctx, lotID, permanent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockInventoryService)(nil).DeleteItem), ctx, lotID, permanent)
}

// GetByID mocks base method.
func (m *MockInventoryService) GetByID(ctx context.Context, lotID uuid.UUID) (*domain.InventoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, lotID)
	ret0, _ := ret[0].(*domain.InventoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockInventoryServiceMockRecorder) GetByID(ctx, lotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockInventoryService)(nil).GetByID), ctx, lotID)
}

// List mocks base method.
func (m *MockInventoryService) List(ctx context.Context, params ports.ListParams) (*ports.ListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, params)
	ret0, _ := ret[0].(*ports.ListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockInventoryServiceMockRecorder) List(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInventoryService)(nil).List), ctx, params)
}

// SaveItem mocks base method.
func (m *MockInventoryService) SaveItem(ctx context.Context, item *domain.InventoryItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveItem", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveItem indicates an expected call of SaveItem.
func (mr *MockInventoryServiceMockRecorder) SaveItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveItem", reflect.TypeOf((*MockInventoryService)(nil).SaveItem), ctx, item)
}

// SaveItems mocks base method.
func (m *MockInventoryService) SaveItems(ctx context.Context, items []domain.InventoryItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveItems", ctx, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveItems indicates an expected call of SaveItems.
func (mr *MockInventoryServiceMockRecorder) SaveItems(ctx, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveItems", reflect.TypeOf((*MockInventoryService)(nil).SaveItems), ctx, items)
}

// UpdateItem mocks base method.
func (m *MockInventoryService) UpdateItem(ctx context.Context, lotID uuid.UUID, item *domain.InventoryItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", ctx, lotID, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockInventoryServiceMockRecorder) UpdateItem(ctx, lotID, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockInventoryService)(nil).UpdateItem), ctx, lotID, item)
}
